-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c @ [state, world], stmt) {
  case stmt of
      Skip -> c
    | Read (x) -> case readWorld (world) of
                    [value, newworld] -> [state <- [x, value], newworld]
                  esac
    | Write (e) -> [state, writeWorld(state.evalExpr(e), world)]
    | Assn (x, e) -> [state <- [x, state.evalExpr(e)], world]
    | Seq (l, r) -> c.eval(l).eval(r)
    | While (e, s1) -> if evalExpr (state, e) != 0 then eval (eval ([state, world], s1), stmt) else [state, world] fi
    | If (e, s1, s2) -> if evalExpr (state, e) != 0 then eval ([state, world], s1) else eval ([state, world], s2) fi
    | Repeat (s1, e) -> case eval ([state, world], s1) of
                        [ns, nw] -> if evalExpr (ns, e) != 0 then [ns, nw] else eval ([ns, nw], stmt) fi
                        esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
